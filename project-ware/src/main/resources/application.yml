### -----------------------本地配置----------------------------

## -----------------------ribbon负载均衡-----------------------
# 针对要访问的各个服务设置负载均衡策略
# NacosRule：
# 1、先访问同一个集群中的服务实例；如果同集群中没有该服务实例则访问其他集群的，且报警提示；
# 2、确定服务列表；
# 3、在列表中采用随机访问策略
#project-member:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule
#project-ware:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule
#project-order:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule
#project-coupon:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule
## 针对要访问的各个服务设置负载均衡饥饿加载
#ribbon:
#  eager-load:
#    enabled: true
#    clients:
#      - project-member
#      - project-ware
#      - project-order
#      - project-coupon

### -----------------------feign远程调用-----------------------
feign:
  client:
    config:
      default: # default全局的配置；或者# 针对某个微服务的配置
        loggerLevel: BASIC # 日志级别，BASIC就是基本的请求和响应信息
  httpclient:
    enabled: true # 开启feign对HttpClient的支持
    max-connections: 200 # 最大的连接数
    max-connections-per-route: 50 # 每个路径的最大连接数
  sentinel:
    enabled: true # 开启feign对sentinel的支持
#
### -----------------------rabbitmq消息队列-----------------------
#spring:
#  rabbitmq:
#    host: localhost #主机名
#    port: 5672 #端口
#    username: guest #用户名
#    password: guest #密码
#    virtual-host: / #虚拟主机
#    listener:
#      direct:
#        prefetch: 1 # 每次只能获取一条消息，处理完才能获取下一个消息
#
### -----------------------sentinel流量控制-----------------------
#  cloud:
#    sentinel:
#      transport:
#        dashboard: localhost:8090

## -----------------------mysql数据库-----------------------
spring:
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://192.168.145.101:3306/db_ware?useUnicode=true & characterEncoding=utf-8 & useSSL=false & serverTimezone=GMT%2B8 & allowPublicKeyRetrieval=true
      username: root
      password: 123456
      initial-size: 10
      max-active: 100
      min-idle: 10
      max-wait: 6000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      #Oracle需要打开注释
      #      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        #login-username: admin
        #login-password: admin
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: false
        wall:
          config:
            multi-statement-allow: true
  messages:
    encoding: UTF-8
    basename: i18n/messages
  mvc:  # 请求路径与 Spring MVC 处理映射匹配的默认策略已从AntPathMatcher更改为PathPatternParser
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
      enabled: true
  thymeleaf:
    cache: false
  session:
    store-type: redis

  ## -----------------------redis-----------------------
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      # use-key-prefix: true
      # key-prefix: CACHE_
      cache-null-values: true
  redis:
    #    host: 192.168.145.101
    #    port: 6379
    password: 123456   # 密码（默认为空）
    cluster:
      nodes: project.com:6379, project.com:6380, project.com:6381, project.com:6382, project.com:6383, project.com:6384
  #    timeout: 6000ms  # 连接超时时长（毫秒）
  #    jedis:
  #      pool:
  #        max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）
  #        max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）
  #        max-idle: 10      # 连接池中的最大空闲连接
  #        min-idle: 5       # 连接池中的最小空闲连接
  #    sentinel:
  #      master: mymaster
  #      nodes:
  #        - 192.168.145.101:16379
  #        - 192.168.145.101:16380
  #        - 192.168.145.101:16381

  # 是否开启redis缓存  true开启   false关闭
#  project:
#    redis:
#      open: true

## -----------------------mybatis-plus配置-----------------------
mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.wwd.modules.*.entity
  global-config:
    #数据库相关配置
    db-config:
      #主键类型
      id-type: ASSIGN_ID
      logic-delete-value: 0
      logic-not-delete-value: 1
    banner: false
  #原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
  configuration-properties:
    prefix:
    blobType: BLOB
    boolValue: TRUE


## -----------------------seata配置-----------------------
seata:
  registry: # TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址
    type: nacos # 注册中心类型 nacos
    nacos:
      server-addr: 192.168.145.101:80 # nacos地址
      namespace: "" # namespace，默认为空
      group: DEFAULT_GROUP # 分组，默认是DEFAULT_GROUP
      application: seata-tc-server # seata服务名称
      username: nacos
      password: nacos
  tx-service-group: seata-demo # 事务组名称
  service:
    vgroup-mapping: # 事务组与cluster的映射关系
      seata-demo: SH
  data-source-proxy-mode: XA  # AT\TCC\Saga @


logging:
  level:
    com.wwd: debug
#  pattern:
#    dateformat: MM-dd HH:mm:ss:SSS

#knife4j:
#  enable: true
#  basic:
#    enable: false
#    username: admin
#    password: admin
#  setting:
#    enableFooter: false


project:
  thread:
    core-size: 20
    max-size: 200
    keep-alive-time: 10